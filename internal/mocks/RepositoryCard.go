// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RepositoryCard is an autogenerated mock type for the RepositoryCard type
type RepositoryCard struct {
	mock.Mock
}

// AddCardDetail provides a mock function with given fields: cardToken, cardBankUUID, expDate, customerID
func (_m *RepositoryCard) AddCardDetail(cardToken string, cardBankUUID string, expDate string, customerID uint32) error {
	ret := _m.Called(cardToken, cardBankUUID, expDate, customerID)

	if len(ret) == 0 {
		panic("no return value specified for AddCardDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, uint32) error); ok {
		r0 = rf(cardToken, cardBankUUID, expDate, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardInfoExists provides a mock function with given fields: cardTk
func (_m *RepositoryCard) CardInfoExists(cardTk string) (bool, error) {
	ret := _m.Called(cardTk)

	if len(ret) == 0 {
		panic("no return value specified for CardInfoExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(cardTk)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cardTk)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cardTk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardBankUUID provides a mock function with given fields: cardUUIDtk
func (_m *RepositoryCard) GetCardBankUUID(cardUUIDtk string) (string, error) {
	ret := _m.Called(cardUUIDtk)

	if len(ret) == 0 {
		panic("no return value specified for GetCardBankUUID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(cardUUIDtk)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(cardUUIDtk)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cardUUIDtk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryCard creates a new instance of RepositoryCard. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryCard(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryCard {
	mock := &RepositoryCard{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
