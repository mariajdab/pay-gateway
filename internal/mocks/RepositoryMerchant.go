// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/mariajdab/pay-gateway/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryMerchant is an autogenerated mock type for the RepositoryMerchant type
type RepositoryMerchant struct {
	mock.Mock
}

// AddMerchant provides a mock function with given fields: p
func (_m *RepositoryMerchant) AddMerchant(p entity.Merchant) error {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for AddMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Merchant) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MerchantCodeExists provides a mock function with given fields: code
func (_m *RepositoryMerchant) MerchantCodeExists(code string) (bool, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for MerchantCodeExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryMerchant creates a new instance of RepositoryMerchant. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryMerchant(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryMerchant {
	mock := &RepositoryMerchant{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
