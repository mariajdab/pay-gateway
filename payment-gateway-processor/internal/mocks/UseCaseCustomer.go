// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/mariajdab/pay-gateway/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// UseCaseCustomer is an autogenerated mock type for the UseCaseCustomer type
type UseCaseCustomer struct {
	mock.Mock
}

// CreateCustomer provides a mock function with given fields: c
func (_m *UseCaseCustomer) CreateCustomer(c entity.Customer) (int, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Customer) (int, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(entity.Customer) int); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(entity.Customer) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCaseCustomer creates a new instance of UseCaseCustomer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCaseCustomer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCaseCustomer {
	mock := &UseCaseCustomer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
