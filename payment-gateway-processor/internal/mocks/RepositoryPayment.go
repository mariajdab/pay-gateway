// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/mariajdab/pay-gateway/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryPayment is an autogenerated mock type for the RepositoryPayment type
type RepositoryPayment struct {
	mock.Mock
}

// AddPaymentTxnHistory provides a mock function with given fields: txn
func (_m *RepositoryPayment) AddPaymentTxnHistory(txn entity.Transaction) error {
	ret := _m.Called(txn)

	if len(ret) == 0 {
		panic("no return value specified for AddPaymentTxnHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Transaction) error); ok {
		r0 = rf(txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentDetail provides a mock function with given fields: txUUID, merchantCode
func (_m *RepositoryPayment) GetPaymentDetail(txUUID string, merchantCode string) (entity.PaymentInfo, error) {
	ret := _m.Called(txUUID, merchantCode)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentDetail")
	}

	var r0 entity.PaymentInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.PaymentInfo, error)); ok {
		return rf(txUUID, merchantCode)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.PaymentInfo); ok {
		r0 = rf(txUUID, merchantCode)
	} else {
		r0 = ret.Get(0).(entity.PaymentInfo)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(txUUID, merchantCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentTxnRefundInfo provides a mock function with given fields: txnUUID, merchantCode
func (_m *RepositoryPayment) GetPaymentTxnRefundInfo(txnUUID string, merchantCode string) (entity.TxnInfo, string, error) {
	ret := _m.Called(txnUUID, merchantCode)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentTxnRefundInfo")
	}

	var r0 entity.TxnInfo
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.TxnInfo, string, error)); ok {
		return rf(txnUUID, merchantCode)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.TxnInfo); ok {
		r0 = rf(txnUUID, merchantCode)
	} else {
		r0 = ret.Get(0).(entity.TxnInfo)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(txnUUID, merchantCode)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(txnUUID, merchantCode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePaymentTxnStatus provides a mock function with given fields: txnUUID, status
func (_m *RepositoryPayment) UpdatePaymentTxnStatus(txnUUID string, status string) error {
	ret := _m.Called(txnUUID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentTxnStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(txnUUID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryPayment creates a new instance of RepositoryPayment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryPayment(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryPayment {
	mock := &RepositoryPayment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
